# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambdatest
# app and org for use with dashboard.serverless.com
app: myapp
org: brchen777

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
    name: aws
    runtime: nodejs12.x
    # region: ap-northeast-1
    # 不知道 cfnRole: arn:aws:iam::754952574167:role/cfn-Role
    iamRoleStatements:
        - Effect: Allow
          Action:
              - states:*
          Resource:
              "*"
              #   - states:DescribeExecution
              #   - states:StopExecution
        #   Resource: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:helloFunction"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
    successLog:
        handler: handler.successLog
        events:
            - http:
                  path: successLog
                  method: get
    errorLog:
        handler: handler.errorLog
        events:
            - http:
                  path: errorLog
                  method: get

    createStepFunction:
        handler: handler.createStepFunction
        events:
            - http:
                  path: stepFunction
                  method: post

    deleteStepFunction:
        handler: handler.deleteStepFunction
        events:
            - http:
                  path: stepFunction
                  method: delete

    printHello:
        handler: trigger.printHello

    iterator:
        handler: trigger.iterator

    restartExecution:
        handler: trigger.restartExecution

stepFunctions:
    stateMachines:
        helloFunction:
            name: helloFunction
            definition:
                Comment: "Test hello"
                StartAt: WaitState
                States:
                    WaitState:
                        Type: Wait
                        Seconds: 30
                        Next: PrintHello
                    PrintHello:
                        Type: Task
                        Resource: !GetAtt printHello.Arn
                        End: True

        restart:
            name: restart
            definition:
                Comment: "Continue-as-new State Machine Example"
                StartAt: ConfigureCount
                States:
                    ConfigureCount:
                        Type: Pass
                        Result:
                            count: 100
                            index: -1
                            step: 1
                        ResultPath: "$.iterator"
                        Next: Iterator
                    Iterator:
                        Type: Task
                        Resource: !GetAtt iterator.Arn
                        ResultPath: "$.iterator"
                        Next: IsCountReached
                    IsCountReached:
                        Type: Choice
                        Choices:
                            - Variable: "$.iterator.continue"
                              BooleanEquals: true
                              Next: ExampleWork
                        Default: ShouldRestart
                    ExampleWork:
                        Comment: "Your application logic, to run a specific number of times"
                        Type: Pass
                        Result:
                            success: true
                        ResultPath: "$.result"
                        Next: Iterator
                    ShouldRestart:
                        Type: Choice
                        Choices:
                            - Variable: "$.restart.executionCount"
                              NumericGreaterThan: 0
                              Next: Restart
                        Default: Done
                    Restart:
                        Type: Task
                        Resource: !GetAtt restartExecution.Arn
                        Next: Done
                    Done:
                        Type: Pass
                        End: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
    - serverless-offline
    - serverless-step-functions
    - serverless-pseudo-parameters
